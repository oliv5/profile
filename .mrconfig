[DEFAULT]
#skip = vcsh_exists && echo "Already in a vcsh repository"
skip = mr_skip

# Mr actions
lib = 
	mr_skip() {
		[ ! -d "$MR_REPO" ] || { [ -r "$HOME/.mrskip" ] && grep "$1.\+$MR_REPO" "$HOME/.mrskip" >/dev/null 2>&1; }
	}
# Add few git actions
lib =
	git_exists() {
		git rev-parse --verify "HEAD" >/dev/null 2>&1
	}
	git_bare() {
		[ "$(git config --get core.bare)" = "true" ]
	}
	git_clone() {
		REPO="$(basename "$MR_REPO" .git)"
		git clone "$1" $REPO
		cd "$REPO"
		if [ ! -z "$2" ]; then git remote rename origin "$2"; fi
	}
	git_pull() {
		vcsh_run "
			git stash save -q 'mrconfig_stash'
			for REMOTE in $1; do
				if git remote | grep -- \\\$REMOTE >/dev/null; then
					for BRANCH in $2; do
						git pull --rebase \\\$REMOTE \\\$BRANCH
					done
				fi
			done
			if git stash list -n 1 | grep 'mrconfig_stash' >/dev/null 2>&1; then git stash apply -q --index; git stash drop -q; fi
		"
	}
	git_push() {
		for REMOTE in $1; do
			if git remote | grep -- $REMOTE >/dev/null; then
				for BRANCH in $2; do
					echo -n "Push $REMOTE/$BRANCH : "
					git push $REMOTE $BRANCH
				done
			fi
		done
	}
	git_bundle() {
		DIR="${1:-.}"
		if [ -d "$DIR" ]; then
			DATE="$(date +%Y%m%d-%H%M%S)"
			BUNDLE="$DIR/${2:-$(basename "$MR_REPO" .git).bundle.$(uname -n).$DATE.git}"
			echo "Git bundle into $BUNDLE"
			git bundle create "$BUNDLE" --all --tags --remotes
			if [ ! -z "$3" ]; then
				gpg -v --output "${BUNDLE}.gpg" --encrypt --recipient "$3" "${BUNDLE}" && 
					(wipe -f -- "${BUNDLE}" || rm -- "${BUNDLE}")
			fi
		else
			echo "Target directory '$DIR' does not exists."
			echo "Skip bundle creation..."
		fi
	}
	git_meta() {
		git-cache-meta --store && 
			git add "$MR_REPO/.git_cache_meta" -f
	}

# Define vcsh helpers
lib =
	vcsh_exists() {
		git config --get vcsh.vcsh >/dev/null 2>&1
	}
	vcsh_run() {
		if vcsh_exists; then
			REPO="$(basename "$MR_REPO" .git)"
			eval vcsh run $REPO sh -c "\"$@\""
		else
			eval sh -c "\"$@\""
		fi
	}
	vcsh_clone() {
		REPO="$(basename "$MR_REPO" .git)"
		vcsh clone "$@" "$REPO" &&
		if [ ! -z "$2" ]; then vcsh run "$REPO" git remote rename origin "$2"; fi
	}

# Define git annex helpers
lib =
	annex_exists() {
		git config --get annex.version >/dev/null 2>&1
	}
	annex_direct() {
		[ "$(git config --get annex.direct)" = "true" ]
	}
	annex_bare() {
		annex_exists && ! annex_direct && git_bare
	}
	annex_init() {
		vcsh_run 'git annex init "$(uname -n)"'
	}
	annex_init_direct() {
		vcsh_run 'annex_init && git annex direct'
	}
	annex_init_hubic() {
		local HUBIC_PATH="${1:-$(basename "$MR_REPO" .git)}"
		vcsh_run '
			git annex initremote hubic type=external externaltype=hubic encryption=none hubic_container=annex hubic_path="$HUBIC_PATH" embedcreds=no ||
			git annex enableremote hubic type=external externaltype=hubic encryption=none hubic_container=annex hubic_path="$HUBIC_PATH" embedcreds=no
		'
	}
	annex_sync() {
		vcsh_run 'git annex sync'
	}
	annex_status() {
		echo "annex status:"
		vcsh_run 'git annex status'
	}
	annex_diff() {
		if ! git config --get annex.direct >/dev/null; then
			vcsh_run 'git diff '"$@"
		fi
	}
	annex_bundle() {
		local DIR="${1:-.}"
		if annex_exists; then
			if [ -d "$DIR" ]; then
				DATE="$(date +%Y%m)"
				BUNDLE="$DIR/${2:-$(basename "$MR_REPO" .git).annex.$(uname -n).$DATE.tgz}"
				echo "Tar annex into $BUNDLE"
				#tar czf "$BUNDLE" ./ -h --exclude-vcs
				if vcsh_exists; then
					vcsh_run "git annex list $(git config --get core.worktree)" | awk 'NR>5 {print $2}' | xargs tar czf "$BUNDLE" -h --exclude-vcs
				elif annex_bare; then
					tar czf "$BUNDLE" -h ./annex
				elif annex_direct; then
					find . -type f -not -path '*.git*' -print0 | xargs -0 tar czf "$BUNDLE" -h --exclude-vcs
				else
					find . -type l -print0 | xargs -0 tar czf "$BUNDLE" -h --exclude-vcs
				fi
				if [ ! -z "$3" ]; then
					gpg -v --output "${BUNDLE}.gpg" --encrypt --recipient "$3" "${BUNDLE}" && 
						(wipe -f -- "${BUNDLE}" || rm -- "${BUNDLE}")
				fi
			else
				echo "Target directory '$DIR' does not exists."
				echo "Skip bundle creation..."
			fi
		else
			echo "Directory '$DIR' is not git-annex ready."
			echo "Skip bundle creation..."
		fi
	}
	annex_copy() {
		vcsh_run 'git annex copy '"$@"
	}

# Include our repositories
include = cat ${XDG_CONFIG_HOME:-$HOME/.config}/mr/config.d/*
