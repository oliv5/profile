#!/bin/sh

# Test if this is a git repo
git_exists() {
	git ${1:+--git-dir="$1"} rev-parse --verify "HEAD" >/dev/null 2>&1
}

# Test if this is a bare repo
git_bare() {
	[ "$(git ${1:+--git-dir="$1"} config --get core.bare)" = "true" ]
}

# Clone a git repo
git_clone() {
	local MR_REPO="${GIT_DIR:-$PWD/.git}"
	local REPO="$(basename "$MR_REPO" .git)"
	for ARGS; do
		set $ARGS
		local REMOTE="${1:?No remote specified}"
		local NAME="${2:-$REPO}"
		local BRANCH="${3:-master}"
		git clone "$REMOTE" "$REPO" || break
		git --git-dir="$REPO/.git" remote rename origin "$NAME"
		git --git-dir="$REPO/.git" checkout "$BRANCH"
	done
}

# Pull a git repo
# Use vcsh wrapper when necessary
git_pull() {
	local REMOTES="${1:?No remote specified}"
	local BRANCHES="${2:-master}"
	local STASH="__git_pull_stash"
	vcsh_cmd run "
		git stash save -q \"$STASH\"
		echo $REMOTES
		for REMOTE in $REMOTES; do
			if git remote | grep -- \"\$REMOTE\" >/dev/null; then
				for BRANCH in $BRANCHES; do
					git pull --rebase \"\$REMOTE\" \"\$BRANCH\"
				done
			fi
		done
		if git stash list -n 1 | grep \"$STASH\" >/dev/null 2>&1; then
			git stash apply -q --index
			git stash drop -q
		fi
	"
}

# Push a git repo
git_push() {
	local REMOTES="${1:?No remote specified}"
	local BRANCHES="${2:-master}"
	for REMOTE in $REMOTES; do
		if git remote | grep -- "$REMOTE" >/dev/null; then
			for BRANCH in $BRANCHES; do
				echo -n "Push $REMOTE/$BRANCH : "
				git push "$REMOTE" "$BRANCH"
			done
		fi
	done
}

# Bundle a repo
git_bundle() {
	local MR_REPO="${GIT_DIR:-$PWD/.git}"
	local DIR="${1:-.}"
	if [ -d "$DIR" ]; then
		local DATE="$(date +%Y%m%d-%H%M%S)"
		local BUNDLE="$DIR/${2:-$(basename "$MR_REPO" .git).bundle.$(uname -n).$DATE.git}"
		local GPG_RECIPIENT="$3"
		echo "Git bundle into $BUNDLE"
		git bundle create "$BUNDLE" --all --tags --remotes
		if [ ! -z "$GPG_RECIPIENT" ]; then
			gpg -v --output "${BUNDLE}.gpg" --encrypt --recipient "$GPG_RECIPIENT" "${BUNDLE}" && 
				(shred -fu "${BUNDLE}" || wipe -f -- "${BUNDLE}" || rm -- "${BUNDLE}")
		fi
		ls -l "${BUNDLE}"*
	else
		echo "Target directory '$DIR' does not exists."
		echo "Skip bundle creation..."
	fi
}

# Cache repo metadata
git_meta() {
	local MR_REPO="${GIT_DIR:-$PWD/.git}"
	git-cache-meta --store && 
		git add "$MR_REPO/.git_cache_meta" -f
}

# Execute command when any
[ $# -gt 0 ] && git_"$@"
