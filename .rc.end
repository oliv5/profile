#!/bin/sh
# Main user profile end script
# It should be compatible with all shells (dash, bash,...)

################################
# Setup locales (https://www.gnu.org/software/gettext/manual/html_node/Locale-Environment-Variables.html#Locale-Environment-Variables)
#   dpkg -l locales || sudo apt-get locales
#   sudo dpkg-reconfigure locales
#   locale
if command -v "locale" >/dev/null 2>&1; then
  ##Â Order of priority: LANGUAGE LC_ALL LC_xxx LANG
  # Set the default locale variable LANG
  LOCALES="$(locale -a 2>/dev/null | sort -u | sed -e 's/utf8/UTF-8/')"
  for LANG in \
      $(echo $LOCALES | xargs -rn1 | grep -ie "fr_fr.*utf-\?8" | head -n 1) \
      $(echo $LOCALES | xargs -rn1 | grep -ie "utf-\?8" | head -n 1) \
      $(echo $LOCALES | xargs -r -l1); do
    export LANG="$LANG"
    break
  done
  unset LOCALES
  # Remove all specific locale variables
  unset LANGUAGE LC_ALL LC_NAME LC_TIME LC_CTYPE
  unset LC_MONETARY LC_ADDRESS LC_TELEPHONE
  unset LC_MEASUREMENT LC_IDENTIFICATION 
  unset LC_NUMERIC LC_PAPER LC_COLLATE LC_MESSAGES
fi

# Test locales display
# https://perlgeek.de/en/article/set-up-a-clean-utf8-environment
test_locales() {
  perl -Mcharnames=:full -CS -wle 'print "\N{EURO SIGN}"'
}

################################
# Setup path
[ -n "${HOME##*/}" ] && path_prepend "$HOME/.local/bin" "$HOME/bin" "$HOME/go/bin" "$HOME/.cargo/bin"
path_append /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin
[ -n "${HOME##*/}" ] && path_append "$HOME/.pbin" "$HOME/.pbin/$([ -n "$ANDROID_ROOT" ] && echo "android" || echo "desktop")" "$HOME/.pbin/wrappers"
path_cleanup
path_remove_absent

# Remove some aliases/fct shortcuts
cmd_unset which find grep awk sed xargs cut

################################
# Load plugins (see mr -c .config/profile/mr/externals checkout)
# https://github.com/junegunn/fzf
if command -v fzf >/dev/null 2>&1; then
  if [ -n "$BASH_VERSION" ] && ! complete -p | grep _fzf_ >/dev/null; then
    if fzf --bash >/dev/null 2>&1; then
      eval "$(fzf --bash)"
    elif [ -r "/usr/share/bash-completion/completions/fzf" ] && [ -r "/usr/share/doc/fzf/examples/key-bindings.bash" ]; then
      source /usr/share/bash-completion/completions/fzf
      source /usr/share/doc/fzf/examples/key-bindings.bash
    fi
    # Override with my configuration
    if [ -r "$RC_DIR/.pbin/resources/fzf/shell/completion.bash" ]; then
      source "$RC_DIR/.pbin/resources/fzf/shell/completion.bash"
    fi
    if [ -r "$RC_DIR/.pbin/resources/fzf/.fzf.bash" ]; then
      source "$RC_DIR/.pbin/resources/fzf/.fzf.bash"
    fi
  fi
  export FZF_DEFAULT_OPTS="--bind=tab:accept"
fi
# https://github.com/RichiH/vcsh
if command -v vcsh >/dev/null 2>&1; then
  if [ -n "$BASH_VERSION" ] && [ -r "$RC_DIR/.pbin/resources/vcsh/completions/vcsh.bash" ]; then
    if ! complete -p _vcsh >/dev/null 2>&1; then
      source "$RC_DIR/.pbin/resources/vcsh/completions/vcsh.bash"
    fi
  fi
fi

################################
# Disable TTY Software Flow Control (XON/XOFF flow control)
# https://unix.stackexchange.com/questions/72086/ctrl-s-hangs-the-terminal-emulator
if shell_isinteractive; then
  stty -ixon
fi

# Renew shell hashes
hash -r

# Default prompt
if [ ${#PS1} -lt 5 ]; then
  export PS1='${USER}${HOSTNAME:+@$HOSTNAME}: $PWD\$ '
fi

# Disable vblank
vblank_off() {
  export vblank_mode=0
  export __GL_SYNC_TO_VBLANK=0
}

# Disable console beep
#command -v xset >/dev/null 2>&1 && pidof X >/dev/null && timeout 2s xset b off 2>/dev/null # From X11 window system
command -v xset >/dev/null 2>&1 && timeout 2s xset b off 2>/dev/null # From X11 window system
command -v setterm >/dev/null 2>&1 && setterm -blength 0 2>/dev/null # From the system console

# Bash special settings
if [ -n "$BASH_VERSION" ]; then
  # Do not quote $XXX during tab-completion
  # https://askubuntu.com/questions/70750/how-to-get-bash-to-stop-escaping-during-tab-completion
  shopt -s direxpand
fi

################################
# User anacron
if command -v anacron >/dev/null 2>&1; then
  if ! pgrep anacron >/dev/null; then
    if [ -r "${HOME}/.anacron/etc/anacrontab" ]; then
      mkdir -p "${HOME}/.anacron/spool"
      anacron -s -t "${HOME}/.anacron/etc/anacrontab" -S "${HOME}/.anacron/spool"
    fi
  fi
fi

# Protect private directories
[ -e "$HOME/private" ] && chmod 700 "$HOME/private"
[ -e "$HOME/.private" ] && chmod 500 "$HOME/.private"
[ -e "$HOME/.ecryptfs" ] && chmod 500 "$HOME/.ecryptfs"

################################
# Gnome keyring/GPG/SSH agents
#command -v start_agent >/dev/null 2>&1 && start_agent && ssh_agent_no_forward

# Add SSH keys wrapper
command -v ssh_add >/dev/null 2>&1 ||
  ssh_add() { ssh_add_wrapper "$@"; }
ssh_add_wrapper() {
  if [ -e "$HOME/private" ] && ! mountpoint "$HOME/private" > /dev/null; then
      echo "Mount private folder..."
      if ! mount_private_folder || ! mountpoint "$HOME/private" > /dev/null; then
          echo "Error: cannot umount private folder..." 1>&2
          return 1
      fi
  fi
  ssh_agent
  KEYS="$(ssh-add -l -E sha256)"
  for KEY; do
    if [ -r "$KEY" ]; then
      FINGERPRINT="$(ssh-keygen -l -E SHA256 -f "$(readlink -f "$KEY")" 2>/dev/null | cut -d' ' -f 1-2)"
      if ! echo "$KEYS" | grep "${FINGERPRINT}\|${KEY}" >/dev/null; then
        chmod 400 "$KEY"
        ssh-add "$KEY"
      fi
    fi
  done
}

################################
# Alias ls - take care with --color=auto because this may hang with nfs/sshfs directories
#unalias ls
alias l='ls -CF'
alias la='ls -A'
alias ll='ls -laF'
alias lld='ls -lad'
alias llh='ls -laFh'
alias lls='ls -laFS'
alias lln='ls -laF | awk "\$5==0 {print \$0}"'
alias llN='ls -laF | awk "\$5!=0 {print \$0}"'
alias lsg='ls | grep'
alias llg='ll | grep'
alias sla='sudo ls -A'
alias sll='sudo ls -laF'

# Alias cd/back
alias b='cdb'
alias f='cdf'
alias p='cd ..'

# Root folder helper
get_root() { command -v _rfind >/dev/null && _rfind "$@"; }
cd_root() { local DIR="$(get_root "$@")" && test -n "$DIR" && cd "$DIR"; }

# Cd helper
cdrp() { cd "$(realpath "$@")"; }
alias cdr='cd_root'
alias r='cd_root'

# Diff/meld & co
alias m='meld'
alias dmr='diffrtm'
alias dmrl='diffrtml'

# Vim & co
alias v='${VI:-false}'
alias V='VIM_NOREMOTE=1 ${VI:-false}'
alias ssv='ss | cut -c 9- | xargs ${VI:-false}'
alias gsv='gs | grep modified | cut -d : -f 2 | xargs ${VI:-false}'

# Graphical editor
alias e='${GEDITOR:-false}'
alias E='command ${GEDITOR:-false}'
alias sse='ss | cut -c 9- | xargs ${GEDITOR:-false}'
alias gse='gs | grep modified | cut -d : -f 2 | xargs ${GEDITOR:-false}'

# Source insight
alias si3='sourceinsight3'
alias si3-2='sourceinsight3 2'
alias si4='sourceinsight4'
alias si4-2='sourceinsight4 2'

# File manager
alias n='${FMANAGER:-false} >/dev/null 2>&1'

# Sudo & co
if command -v sudo >/dev/null 2>&1; then
  # Sudo now supports alias expansion
  # http://www.shellperson.net/using-sudo-with-an-alias/
  alias sudo='sudo '
else 
  alias sudo='su root --'
fi
if ! command -v gksudo >/dev/null; then
  gksudo() { pkexec env DISPLAY="$DISPLAY" XAUTHORITY="$XAUTHORITY" "$@" & }
fi
if ! command -v gksu >/dev/null; then
  # https://wiki.ubuntu.com/Wayland/gks
  gksu() { (trap "xhost -si:localuser:root" INT TERM QUIT EXIT; xhost +si:localuser:root; sudo -H "$@") & }
fi
runas() {
  # script -qc makes a script believe stdout is a tty
	local ME="${1:-root}"
	shift 2>/dev/null
	sudo -u "$ME" -i -- script -qc "$@"
}
sudo_delayed() {
  local DELAY="${1:?No delay specified...}"; shift
  sudo sh -c "sleep $DELAY ; eval \$@" _ "$@"
}

# Pkexec
alias pkexec='pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY'
# When pkexec fails because of dbus not available, do: `pkttyagent --process $$ &`

# Search and process
unalias ffv ffv1 ffp ffp1 ffe ffe1 ffo ffo1 ffc ffc1 ffwc 2>/dev/null || true
if which "${VI:-gvim}" >/dev/null; then
  ffv()  { ff0 "${@:-""}"  | xargs -r0 ${VI:-vi}; }
  iffv() { iff0 "${@:-""}" | xargs -r0 ${VI:-vi}; }
  ffv1() { ff1 "${@:-""}"  | xargs -r0 ${VI:-vi}; }
  iffv1(){ iff1 "${@:-""}" | xargs -r0 ${VI:-vi}; }
else
  ffv()  { ${VI:-gvim} $(ff0 "$@" | xargs -r0 printf '%s '); }
  iffv() { ${VI:-gvim} $(iff0 "$@" | xargs -r0 printf '%s '); }
  ffv1() { ${VI:-gvim} $(ff1 "$@" | xargs -r0 printf '%s '); }
  iffv1(){ ${VI:-gvim} $(iff1 "$@" | xargs -r0 printf '%s '); }
fi
ffp()  { ff0 "${@:-""}"  | xargs -r0 ${PAGER:-false}; }
ffp1() { ff1 "${@:-""}"  | xargs -r0 ${PAGER:-false}; }
ffe()  { ff0 "${@:-""}"  | xargs -r0 ${GEDITOR:-false}; }
ffe1() { ff1 "${@:-""}"  | xargs -r0 ${GEDITOR:-false}; }
ffo()  { ff0 "${@:-""}"  | xargs -r0 mimeopen; }
ffo1() { ff1 "${@:-""}"  | xargs -r0 mimeopen; }
ffc()  { ff0 "${@:-""}"  | xargs -r0 cat ; }
ffc1() { ff1 "${@:-""}"  | xargs -r0 cat ; }
ffwc() { ff0 "${@:-""}"  | wc --files0-from=- -l; }

# Grep & open
refv()  { ${VI:-gvim} $(ref "$@" | awk -F: '{print $1 " +" $2}'); }
irefv() { ${VI:-gvim} $(iref "$@" | awk -F: '{print $1 " +" $2}'); }

# Stat
alias fs='stat -c "%s"'

# Move
alias mv="mv -i"

# rm files
if command -v gio >/dev/null; then
  alias trash='gio trash'
else
  alias trash='gvfs-trash'
fi

# mk/rm dir
alias mkd='mkdir'
alias rmd='rmdir'

# Grep
alias grep='grep --color'
alias g='grep'
alias gv='grep -v'
alias gc='grep --color'
alias ig='grep -i'
alias igv='grep -iv'
alias pg='pgrep -l'

# Kill
alias k='kill'
alias k9='kill -9'
alias ks='kill -STOP'
alias kc='kill -CONT'
alias ka='killall'
alias ka9='killall -9'
alias kas='killall -STOP'
alias kac='killall -CONT'
alias pk='pkill'
alias pk9='pkill -9'
alias sk='sudo kill'
alias sk9='sudo kill -9'
alias spk='sudo pkill'
alias spk9='sudo pkill -9'
alias ska='sudo killall'
alias ska9='sudo killall -9'
alias sks='sudo killall -STOP'
alias skc='sudo killall -CONT'
alias xk='xkill'

# Ps
alias pse='ps -ef'
alias psf='ps faux'
alias psg='ps aux | grep -i'
alias psu='ps fu'
alias pg='pgrep -fl'

# Lsof
alias lsofg='lsof | grep -i'

# Du
unalias duh duh0 duh1 duh2 duhlx duhlx0 duhlx1 duhlx2 2>/dev/null || true
duh() { du -h "$@"; }
duh0() { du -h -d0 "$@"; }
duh1() { du -h -d1 "$@" | sort -h; }
duh2() { du -h -d2 "$@" | sort -h; }
duhlx() { du -hLx "$@"; }
duhlx0() { du -hLx -d0 "$@" | sort -h; }
duhlx1() { du -hLx -d1 "$@" | sort -h; }
duhlx2() { du -hLx -d2 "$@" | sort -h; }

# df
alias dfh='df -h | grep -v /snap/'

# EnvÂ | grep
unalias pv 2>/dev/null || true
pv() { for V; do echo "$V=$(eval echo \$$V)"; done; }
alias envg='env | grep -i'
alias dpkgl='dpkg -l'
alias dpkgg='dpkg -l | grep -i'
dpkgln() { dpkgl "$@" | awk '{print $2}'; }
dpkggn() { dpkgg "$@" | awk '{print $2}'; }

# Head/tail
alias hd='head'
alias h1='head -n 1'
alias h2='head -n 2'
alias h5='head -n 5'
alias h10='head -n 10'
alias tl='tail'
alias t1='tail -n 1'
alias t2='tail -n 2'
alias t5='tail -n 5'
alias t10='tail -n 10'

# Network monitors
alias ns='netstat -an'
alias nst='netstat -antp'
alias nsu='netstat -anup'
alias nsg='netstat -an | grep'
alias nstg='netstat -antp | grep'
alias nsug='netstat -anup | grep'
alias nh='nethogs'
alias it='iftop'
alias sns='sudo netstat -an'
alias snst='sudo netstat -antp'
alias snsu='sudo netstat -anup'
alias snstp='sudo netstat -antp'
alias snsup='sudo netstat -anup'
alias snsg='sudo netstat -an | grep'
alias snstg='sudo netstat -antp | grep'
alias snsug='sudo netstat -anup | grep'
alias snstpg='sudo netstat -antp | grep'
alias snsupg='sudo netstat -anup | grep'
alias snh='sudo nethogs'

# History
export HISTIGNORE="sudo -S*" # ignore "sudo -S"
alias hg='history | grep'
alias hgi='history | grep -i'
alias hist_clear='rm "$HOME/.bash_history"; history -c;'
hist_size() { export HISTSIZE="${1:-500}"; }
alias nohist='export HISTSIZE=0;'

# Re-execute commands
alias hr='fc -s'

# Mount
alias mg='mount | grep'

# Rsync
alias rcp='rsync_cp'
alias rmv='rsync_mv'
alias rmktree='rsync_mktree'
alias rcptree='rsync_cptree'
alias rmvtree='rsync_mvtree'
alias rts='rsync_timestamp'

# xargs
alias x='xargs -r'
alias x0='xargs -r0'

# batcat
if command -v batcat >/dev/null; then
  alias bat='batcat'
fi

# syslog
alias auth='sudo tail /var/log/auth.log'
syslog() {
  if command -v journalctl >/dev/null; then
    journalctl --no-pager -m ${@:--n 35}
  else
    sudo tail /var/log/syslog "$@"
  fi
}
log() {
  local LOG="${1:?No log specified...}"
  shift
  sudo tail "/var/log/${LOG}" "$@"
}

#Â system upgrade
alias sysup='screen -c /dev/null -m sudo sh -c " \
  set +e; \
  command -v apt-get >/dev/null && \
    apt-get update && \
    apt-get full-upgrade && \
    apt-get autoremove; \
  command -v pkcon >/dev/null && \
    pkcon refresh && \
    pkcon get-updates && \
    pkcon update; && \
  command -v snap >/dev/null && \
    snap refresh; \
  command -v flatpak >/dev/null && \
    flatpak upgrade; \
  screen -X quit; \
"'

# KDEconnect/GSconnect
if [ -f "$HOME/.local/share/gnome-shell/extensions/gsconnect@andyholmes.github.io/service/daemon.js" ]; then
  alias gsconnect='"$HOME/.local/share/gnome-shell/extensions/gsconnect@andyholmes.github.io/service/daemon.js"'
fi

# Clamscan
if command -v clamscan >/dev/null; then
  alias clamscan='clamscan -r --infected --detect-pua=yes --detect-structured=yes --official-db-only=yes --bytecode=yes --heuristic-alerts=yes --max-files=0 --max-filesize=0 --max-scansize=0 --max-scantime=0'
  alias freshclam='sudo freshclam --show-progress'
fi

# ccache
if command -v ccache >/dev/null; then
  path_prepend /usr/lib/ccache
fi

# Miniconda env
if [ -d "$HOME/miniconda3/bin" ]; then
  export PATH="$HOME/miniconda3/bin:$PATH"
  alias conda_bash='eval "$("/home/ola/miniconda3/bin/conda" "shell.bash" "hook" 2> /dev/null)"'
fi

# Misc
alias mo='mimeopen'
alias xo='xdg-open'
alias s='silent'
alias ag='alias | grep'
alias agi='alias | grep -i'
alias n='noerror'
alias ne='noerror'
alias sysrq='echo "Nicest reboot possible: alt+sysrq+ e (sigterm), i (sigkill), s (sync), u (remount ro), b (reboot)"'
