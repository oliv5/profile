// Personal key bindings
// Oliv5 at caramail dot com
[

//////////////////////////////////////////////////
// Show internal values
// { "key":  "alt+q",                "command": "workbench.action.terminal.sendSequence", "args": {
    // "text" : "echo file = '${file}' : workspaceFolder = '${workspaceFolder}' : user = '${env:USERNAME}'\u000D" } },

// Note about When clause: focusedView == 'workbench.debug.watchExpressionsView' equivalent to watchExpressionsFocused

//////////////////////////////////////////////////
// Disable defaults
{ "key": "ctrl+q",                "command": "" },
{ "key": "ctrl+w",                "command": "" },
{ "key": "ctrl+g",                "command": "" },
{ "key": "f1",                    "command": "" },
{ "key": "f7",                    "command": "" },
{ "key": "f8",                    "command": "" },
{ "key": "ctrl+shift+f10",        "command": "" },
{ "key": "f11",                   "command": "" },
{ "key": "f12",                   "command": "" },
{ "key": "ctrl+f12",              "command": "" },
{ "key": "shift+f12",             "command": "" },
{ "key": "ctrl+shift+f12",        "command": "" },

// Escape
{ "key": "escape",                "command": "workbench.action.focusActiveEditorGroup", "when":"panelFocus" },
{ "key": "escape",                "command": "workbench.action.closeSidebar", "when":"sideBarFocus" },
{ "key": "ctrl+escape",           "command": "extension.multiCommand.execute", "args":
    { "sequence": [ "workbench.action.closeSidebar", "workbench.action.closePanel", "workbench.action.closeAuxiliaryBar" ] } },
{ "key": "shift+escape",          "command": "extension.multiCommand.execute", "args":
    { "sequence": [ "workbench.action.closeSidebar", "workbench.action.closePanel", "workbench.action.closeAuxiliaryBar" ] } },

// F12 bar toggling
{ "key": "f12",                   "command": "extension.multiCommand.execute", "when" : "sideBarVisible", "args":
    { "sequence": [ "workbench.action.closeSidebar", "workbench.action.closePanel", "workbench.action.closeAuxiliaryBar" ] } },
{ "key": "f12",                   "command": "extension.multiCommand.execute", "when" : "! sideBarVisible", "args":
    { "sequence": [ "workbench.action.toggleSidebarVisibility", "workbench.action.togglePanel", "workbench.action.toggleAuxiliaryBar", "workbench.action.focusActiveEditorGroup" ] } },
{ "key": "f12",                   "command": "workbench.action.closePanel", "when" : "panelVisible" },
{ "key": "alt+f12",               "command": "workbench.action.toggleActivityBarVisibility" },
{ "key": "shift+f12",             "command": "workbench.action.toggleSidebarVisibility" },
{ "key": "ctrl+f12",              "command": "workbench.action.togglePanel" },
{ "key": "ctrl+shift+f12",        "command": "workbench.action.toggleFullScreen" },
{ "key": "ctrl+alt+f12",          "command": "workbench.action.toggleAuxiliaryBar" },

// Panel & bars
{ "key": "ctrl+alt+p",            "command": "workbench.action.togglePanel" },
{ "key": "ctrl+alt+b",            "command": "workbench.action.toggleSidebarVisibility" },
{ "key": "ctrl+alt+s",            "command": "workbench.action.toggleAuxiliaryBar" },
{ "key": "ctrl+alt+a",            "command": "workbench.action.toggleActivityBarVisibility" },
{ "key": "ctrl+b",                "command": "-workbench.action.toggleSidebarVisibility" },

// Views
{ "key": "ctrl+alt+d",            "command": "workbench.view.debug" },
{ "key": "ctrl+alt+y",            "command": "workbench.debug.action.toggleRepl" },
{ "key": "ctrl+alt+o",            "command": "workbench.action.output.toggleOutput" },
{ "key": "ctrl+alt+t",            "command": "workbench.action.terminal.toggleTerminal" },
{ "key": "ctrl+alt+e",            "command": "workbench.view.extensions" },
{ "key": "ctrl+alt+x",            "command": "workbench.view.extensions" },
{ "key": "ctrl+alt+g",            "command": "workbench.view.scm", "when": "workbench.scm.active" },
{ "key": "ctrl+alt+f",            "command": "workbench.view.search" },
{ "key": "ctrl+e",                "command": "extension.multiCommand.execute", "args":
    { "sequence": [ "workbench.view.explorer", "workbench.explorer.fileView.focus" ] } },
{ "key": "ctrl+alt+l",            "command": "outline.toggleVisibility" },
{ "key": "ctrl+alt+r",            "command": "CppReferencesView.toggleVisibility" },

// Quick actions (searches / navigate)
{ "key": "ctrl+tab",              "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup" },
{ "key": "ctrl+[backquote]",      "command": "workbench.action.openPreviousRecentlyUsedEditorInGroup" },
{ "key": "ctrl+shift+[backquote]","command": "workbench.action.openNextRecentlyUsedEditorInGroup" },
{ "key": "ctrl+p",                "command": "workbench.action.quickOpen" },
{ "key": "ctrl+shift+p",          "command": "workbench.action.showCommands" },
{ "key": "alt+w",                 "command": "workbench.action.showAllEditorsByMostRecentlyUsed" }, // MRU files
{ "key": "ctrl+o",                "command": "workbench.action.showAllEditorsByMostRecentlyUsed" }, // MRU files
{ "key": "ctrl+shift+o",          "command": "workbench.action.openRecent" }, // MRU workspaces
{ "key": "ctrl+t",                "command": "workbench.action.showAllSymbols" },
{ "key": "ctrl+shift+t",          "command": "workbench.action.gotoSymbol" },

// Cursor/focus navigation
{ "key": "alt+left",              "command": "workbench.action.navigateBack" },
{ "key": "alt+backspace",         "command": "workbench.action.navigateBack" },
{ "key": "alt+right",             "command": "workbench.action.navigateForward" },
{ "key": "ctrl+left",             "command": "workbench.action.navigateLeft" },
{ "key": "ctrl+right",            "command": "workbench.action.navigateRight" },
{ "key": "ctrl+up",               "command": "workbench.action.navigateUp" },
{ "key": "ctrl+down",             "command": "workbench.action.navigateDown" },
{ "key": "ctrl+j",                "command": "workbench.action.gotoLine" },
{ "key": "alt+end",               "command": "editor.action.jumpToBracket" },
{ "key": "alt+home",              "command": "editor.action.jumpToBracket" },

// Views (a.k.a windows) management
{ "key": "ctrl+w up",             "command": "views.moveViewUp" },
{ "key": "ctrl+w down",           "command": "views.moveViewDown" },
{ "key": "ctrl+w left",           "command": "views.moveViewLeft" },
{ "key": "ctrl+w right",          "command": "views.moveViewRight" },
{ "key": "ctrl+w ctrl+n",         "command": "workbench.action.newWindow" },
{ "key": "ctrl+w ctrl+up",        "command": "workbench.action.focusAboveGroup" },
{ "key": "ctrl+w ctrl+down",      "command": "workbench.action.focusBelowGroup" },
{ "key": "ctrl+w ctrl+left",      "command": "workbench.action.focusLeftGroup" },
{ "key": "ctrl+w ctrl+right",     "command": "workbench.action.focusRightGroup" },
{ "key": "ctrl+w s",              "command": "workbench.action.splitEditorDown" },
{ "key": "ctrl+w ctrl+s",         "command": "workbench.action.splitEditor" },
{ "key": "ctrl+w shift+s",        "command": "workbench.action.closeEditorsInOtherGroups" },
{ "key": "ctrl+w ctrl+t",         "command": "workbench.action.joinTwoGroups" },
{ "key": "ctrl+w ctrl+a",         "command": "workbench.action.joinAllGroups" },
{ "key": "ctrl+shift+f4",         "command": "workbench.action.closeActiveEditor", "when": "editorTextFocus" },
{ "key": "ctrl+w ctrl+c",         "command": "workbench.action.closeActiveEditor", "when": "editorTextFocus" },
{ "key": "ctrl+w ctrl+shift+c",   "command": "workbench.action.closeAllEditors" },
{ "key": "ctrl+w ctrl+p",         "command": "workbench.action.pinEditor", "when": "!activeEditorIsPinned" },
{ "key": "ctrl+w ctrl+p",         "command": "workbench.action.unpinEditor", "when": "activeEditorIsPinned" },
{ "key": "alt+up",                "command": "workbench.action.previousEditor", "when": "editorTextFocus" },
{ "key": "alt+down",              "command": "workbench.action.nextEditor", "when": "editorTextFocus" },

// Go back to editor, stop debugging, close all other windows/panels/bars
{ "key": "ctrl+w ctrl+w",         "command": "extension.multiCommand.execute", "args":
    { "sequence": [ "workbench.action.debug.stop", "workbench.action.closePanel", "workbench.action.closeSidebar" ] } },

// Zooms
{ "key": "ctrl++",                "command": "workbench.action.zoomIn" },
{ "key": "ctrl+-",                "command": "workbench.action.zoomOut" },

// Open files
{ "key": "ctrl+k ctrl+o",         "command": "-workbench.action.files.openFolder", "when": "openFolderWorkspaceSupport" },
{ "key": "ctrl+k ctrl+o",         "command": "workbench.action.openWorkspace" },
{ "key": "ctrl+k f",              "command": "workbench.action.files.closeFolder" },
{ "key": "ctrl+k ctrl+f",         "command": "workbench.action.files.openFolder" },

// Undo/redo
{ "key": "ctrl+z",                "command": "undo", "when": "editorTextFocus" },
{ "key": "ctrl+y",                "command": "redo", "when": "editorTextFocus" },
{ "key": "ctrl+shift+z",          "command": "redo", "when": "editorTextFocus" },
{ "key": "ctrl+shift+r",          "command": "workbench.action.files.revert", "when": "editorTextFocus" },

// Error markers
{ "key": "f1",                    "command": "editor.action.marker.nextInFiles" },
{ "key": "shift+f1",              "command": "editor.action.marker.prevInFiles" },
{ "key": "meta+f1",               "command": "editor.action.marker.next" },
{ "key": "meta+shift+f1",         "command": "editor.action.marker.prev" },
{ "key": "ctrl+f1",               "command": "workbench.actions.view.problems", "when": "workbench.panel.markers.view.active" },

// Quick selection & multi-cursor
{ "key": "f2",                    "command": "editor.action.addSelectionToNextFindMatch", "when": "editorFocus" },
{ "key": "shift+f2",              "command": "editor.action.addSelectionToPreviousFindMatch", "when": "editorFocus" },
{ "key": "ctrl+f2",               "command": "editor.action.selectHighlights", "when": "editorFocus" },
{ "key": "ctrl+shift+f2",         "command": "editor.action.selectHighlights", "when": "editorFocus" },

// Quick match: search & replace in current file
{ "key": "ctrl+f",                "command": "actions.find" },
{ "key": "ctrl+h",                "command": "editor.action.startFindReplaceAction" },
// Quick match navigation
{ "key": "f3",                    "command": "editor.action.nextMatchFindAction", "when": "editorFocus && !editorHasSelection" },
{ "key": "f3",                    "command": "editor.action.nextSelectionMatchFindAction", "when": "editorFocus && editorHasSelection" },
{ "key": "shift+f3",              "command": "editor.action.previousMatchFindAction", "when": "editorFocus && !editorHasSelection" },
{ "key": "shift+f3",              "command": "editor.action.previousSelectionMatchFindAction", "when": "editorFocus && editorHasSelection" },
{ "key": "ctrl+f3",               "command": "extension.multiCommand.execute", "when" : "editorFocus && editorHasSelection", "args":
    { "sequence": [ "toggleFindWholeWord", "editor.action.nextSelectionMatchFindAction" ] } },

// Search bar: open/toggle
{ "key": "ctrl+shift+f",    "command": "workbench.action.findInFiles", "when" : "!sideBarFocus" },
{ "key": "ctrl+shift+f",    "command": "workbench.action.closeSidebar", "when" : "sideBarFocus" },
// Search bar: search & replace in all files
{ "key": "ctrl+g",                "command": "extension.multiCommand.execute", "when" : "!sideBarFocus", "args":
    { "sequence": [ "editor.action.addSelectionToNextFindMatch", "workbench.action.findInFiles" ] } },
{ "key": "ctrl+g",                "command": "search.action.openInEditor", "when" : "hasSearchResult && searchViewletFocus" },
// Search bar: navigation
{ "key": "f4",                    "command": "search.action.focusNextSearchResult", "when": "hasSearchResult || inSearchEditor" },
{ "key": "shift+f4",              "command": "search.action.focusPreviousSearchResult", "when": "hasSearchResult || inSearchEditor" },
{ "key": "ctrl+f4",               "command": "search.action.clearSearchResults", "when": "hasSearchResult" },

// Quick match / search options
{ "key": "alt+c",               "command": "extension.multiCommand.execute", "when" : "editorFocus", "args":
    { "sequence": [ "toggleFindCaseSensitive", "toggleSearchCaseSensitive" ] } },
{ "key": "alt+r",               "command": "extension.multiCommand.execute", "when" : "editorFocus", "args":
    { "sequence": [ "toggleFindRegex", "toggleSearchRegex" ] } },
//{ "key": "alt+w",               "command": "extension.multiCommand.execute", "when" : "editorFocus", "args":
//    { "sequence": [ "toggleFindWholeWord", "toggleSearchWholeWord" ] } },
{ "key": "alt+x",               "command": "extension.multiCommand.execute", "when" : "editorFocus", "args":
    { "sequence": [ "toggleFindWholeWord", "toggleSearchWholeWord" ] } },

// Folding
{ "key": "ctrl+u",                "command": "-cursorUndo", "when": "textInputFocus"  },
{ "key": "ctrl+u",                "command": "editor.fold", "when": "editorFocus" },
{ "key": "ctrl+shift+u",          "command": "editor.unfold", "when": "editorFocus" },
{ "key": "ctrl+alt+u",            "command": "editor.foldAll", "when": "editorFocus" },
{ "key": "ctrl+alt+shift+u" ,     "command": "editor.unfoldAll", "when": "editorFocus" },

// Comments
{ "key": "ctrl+q",                "command": "editor.action.commentLine", "when": "editorTextFocus" },
{ "key": "ctrl+shift+q",          "command": "editor.action.blockComment", "when": "editorTextFocus" },

// Editor misc
{ "key": "ctrl+shift+x",          "command": "workbench.action.files.toggleActiveEditorReadonlyInSession" },

// Intellisense peek/preview
{ "key": "ctrl+d ctrl+d",         "command": "editor.action.peekDeclaration", "when": "editorHasDeclarationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" }, // same as editor.action.revealDefinition
{ "key": "ctrl+d ctrl+e",         "command": "editor.action.peekDefinition", "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "ctrl+d ctrl+r",         "command": "editor.action.referenceSearch.trigger", "when": "editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "ctrl+d ctrl+i",         "command": "editor.action.peekImplementation", "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "ctrl+d ctrl+t",         "command": "editor.action.peekTypeDefinition", "when": "editorHasTypeDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "shift+alt+h",           "command": "-references-view.showCallHierarchy", "when": "editorHasCallHierarchyProvider" },
{ "key": "ctrl+d ctrl+c",         "command": "references-view.showCallHierarchy", "when": "editorHasCallHierarchyProvider" },

{ "key": "ctrl+enter",            "command": "editor.action.peekDefinition", "when": "editorHasDeclarationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "ctrl+shift+backspace",  "command": "editor.action.peekDefinition", "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "ctrl+alt+backspace",    "command": "editor.action.peekDefinition", "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },

// Intellisense goto
{ "key": "ctrl+d d",              "command": "editor.action.goToDeclaration", "when": "editorHasDeclarationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "ctrl+d e",              "command": "editor.action.revealDefinition", "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "ctrl+backspace",        "command": "editor.action.goToReferences", "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "ctrl+d c",              "command": "editor.action.goToReferences", "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "ctrl+d i",              "command": "editor.action.goToImplementation", "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "ctrl+d t",              "command": "editor.action.goToTypeDefinition", "when": "editorHasTypeDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },

// Quickfix proposals
{ "key": "ctrl+shift+space",      "command": "editor.action.quickFix", "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
{ "key": "ctrl+shift+[Comma]",    "command": "-editor.action.quickFix", "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
{ "key": "ctrl+shift+space",      "command": "problems.action.showQuickFixes", "when": "problemFocus" },
{ "key": "ctrl+shift+[Comma]",    "command": "-problems.action.showQuickFixes", "when": "problemFocus" },

// Debugger
{ "key": "f5",                    "command": "workbench.action.debug.start", "when": "debuggersAvailable && !inDebugMode" },
{ "key": "f5",                    "command": "workbench.action.debug.continue", "when": "debuggersAvailable && inDebugMode" },
{ "key": "f5",                    "command": "extension.multiCommand.execute", "when": "debuggersAvailable && debugState == 'running'", "args":
    { "sequence": [ { "command": "workbench.action.tasks.runTask", "args": "Pause" }, "workbench.action.debug.pause" ] } },
{ "key": "shift+f5",              "command": "extension.multiCommand.execute", "when": "debuggersAvailable", "args":
    { "sequence": [ { "command": "workbench.action.tasks.runTask", "args": "Stop" }, "workbench.action.debug.stop" ] } },
{ "key": "ctrl+f5",               "command": "extension.multiCommand.execute", "when": "debuggersAvailable && inDebugMode", "args":
    { "sequence": [ { "command": "workbench.action.tasks.runTask", "args": "Stop" }, "workbench.action.debug.restart" ] } },
{ "key": "ctrl+shift+f5",         "command": "workbench.action.debug.selectandstart", "when": "debuggersAvailable && !inDebugMode" },
{ "key": "f10",                   "command": "workbench.action.debug.stepOver", "when": "debuggersAvailable && inDebugMode" },
{ "key": "shift+f10",             "command": "editor.debug.action.runToCursor", "when": "debuggersAvailable && inDebugMode" },
{ "key": "f11",                   "command": "workbench.action.debug.stepInto", "when": "debuggersAvailable && inDebugMode" },
{ "key": "shift+f11",             "command": "workbench.action.debug.stepOut", "when": "debuggersAvailable && inDebugMode" },
{ "key": "f9",                    "command": "editor.debug.action.toggleBreakpoint", "when": "debuggersAvailable && editorTextFocus" },
{ "key": "ctrl+f9",               "command": "workbench.debug.viewlet.action.addFunctionBreakpointAction", "when": "debuggersAvailable" },
{ "key": "alt+f9",                "command": "workbench.debug.viewlet.action.addDataBreakpointOnAddress", "when": "debuggersAvailable" },
{ "key": "ctrl+shift+f9",         "command": "workbench.debug.viewlet.action.toggleBreakpointsActivatedAction", "when": "debuggersAvailable" },
{ "key": "ctrl+alt+shift+f9",     "command": "workbench.debug.viewlet.action.removeAllBreakpoints", "when": "debuggersAvailable" },
{ "key": "ctrl+f2",               "command": "editor.debug.action.selectionToWatch", "when": "debuggersAvailable && editorTextFocus" },
{ "key": "ctrl+f2",               "command": "workbench.debug.viewlet.action.addWatchExpression", "when": "debuggersAvailable && watchExpressionsFocused" },
{ "key": "shift+f2",              "command": "workbench.debug.viewlet.action.copyValue", "when": "debuggersAvailable && watchExpressionsFocused" }, // Does not seem to work !

// Tasks
//{ "key": "f6",                    "command": "extension.multiCommand.execute", "when": "!inDebugMode", "args":
    //{ "sequence": [ "closeMarkersNavigation", "workbench.action.tasks.build" ] } },
// { "key": "ctrl+f6",               "command": "extension.multiCommand.execute", "when": "inDebugMode", "args":
//     { "sequence": [ "closeMarkersNavigation", "workbench.action.debug.stop", "workbench.action.tasks.build", "workbench.action.debug.start" ] } },
{ "key": "f6",                    "command": "workbench.action.tasks.build", "when": "!inDebugMode" },
{ "key": "ctrl+alt+f6",           "command": "workbench.action.tasks.terminate", "when": "!inDebugMode" },
{ "key": "shift+f6",              "command": "workbench.action.tasks.runTask", "when": "!inDebugMode", "args": "Clean" },
{ "key": "ctrl+f6",               "command": "workbench.action.tasks.test", "when": "!inDebugMode" },
{ "key": "ctrl+shift+f6",         "command": "workbench.action.tasks.runTask", "when": "!inDebugMode" },

// Terminal
// https://stackoverflow.com/questions/50725243/vscode-how-to-keybind-an-external-command/50749571#50749571
// https://stackoverflow.com/questions/52786022/shortcut-for-running-terminal-command-in-vs-code
{ "key": "ctrl+alt+b",            "command": "workbench.action.terminal.sendSequence", "args": { "text": "mkalltags . \u000D" }},
// { "key": "ctrl+c",                "command": "workbench.action.terminal.sendSequence", "args": { "text": "\u0003" }, "when": "terminalFocus" },
// { "key": "ctrl+c",                "command": "workbench.action.terminal.copySelection", "when": "terminalFocus" },
{ "key": "ctrl+v",                "command": "workbench.action.terminal.paste", "when": "terminalFocus" },
{ "key": "ctrl+tab",              "command": "workbench.action.terminal.focusNext", "when": "terminalFocus" },
{ "key": "ctrl+shift+tab",        "command": "workbench.action.terminal.focusPrev", "when": "terminalFocus" },

//////////////////////////////////////////////////
// Extensions

// Extension Microsoft C/C++ intellisense (ms-vscode.cpptools)
{ "key": "ctrl+b ctrl+b",         "command": "C_Cpp.SwitchHeaderSource", "when": "editorTextFocus && editorLangId == 'c' || editorTextFocus && editorLangId == 'cpp' || editorTextFocus && editorLangId == 'cuda-cpp'" },
{ "key": "alt+o",                 "command": "-C_Cpp.SwitchHeaderSource", "when": "editorTextFocus && editorLangId == 'c' || editorTextFocus && editorLangId == 'cpp' || editorTextFocus && editorLangId == 'cuda-cpp'" },

// Extension seungukshin.cscope-code
// Cscope: https://github.com/SeungukShin/cscope-code
//{ "key": "ctrl+d ctrl+d",         "command": "extension.cscope-code.definition", "when": "editorTextFocus" },
//{ "key": "ctrl+d ctrl+c",         "command": "extension.cscope-code.caller", "when": "editorTextFocus" },
//{ "key": "ctrl+d ctrl+e",         "command": "extension.cscope-code.callee", "when": "editorTextFocus" },
//{ "key": "ctrl+d ctrl+backspace", "command": "extension.cscope-code.symbol", "when": "editorTextFocus" },
//{ "key": "ctrl+d ctrl+t",         "command": "extension.cscope-code.symbol", "when": "editorTextFocus" },

// Extension xulion.codescope
// Cscope: https://github.com/xulion/scope4code
//{ "key": "ctrl+d ctrl+b",         "command": "extension.build", "when": "editorTextFocus" },
//{ "key": "ctrl+d ctrl+d",         "command": "extension.findDefinition", "when": "editorTextFocus" },
//{ "key": "ctrl+d ctrl+c",         "command": "extension.findCaller", "when": "editorTextFocus" },
//{ "key": "ctrl+d ctrl+e",         "command": "extension.findCallee", "when": "editorTextFocus" },
//{ "key": "ctrl+d ctrl+backspace", "command": "extension.findSymbol", "when": "editorTextFocus" },
//{ "key": "ctrl+d ctrl+t",         "command": "extension.findSymbol", "when": "editorTextFocus" },
//{ "key": "ctrl+d ctrl+g",         "command": "extension.findText", "when": "editorTextFocus" },
//{ "key": "ctrl+d ctrl+i",         "command": "extension.findInclude", "when": "editorTextFocus" },

// Extension tomhultonharrop.switch-corresponding
// { "key": "ctrl+b ctrl+b",         "command": "extension.switch_corresponding_same_workspace", "when": "editorTextFocus" },

// Extension edit with shell (ryu1kn.edit-with-shell)
{ "key": "ctrl+i",                "command": "editWithShell.runCommand" },

// Extension AutoHide (sirmspencer.vscode-autohide)
{ "key": "ctrl+alt+shift+b",      "command": "autoHide.toggleHideSideBar" },
{ "key": "ctrl+alt+shift+p",      "command": "autoHide.toggleHidePanel" },

//////////////////////////////////////////////////
// Empty placeholder for vscode to append new keybindings afterwards
{
    "key": "",
    "command": ""
},
]
