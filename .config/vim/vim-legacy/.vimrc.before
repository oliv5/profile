" *******************************************************
" } Key mapping helpers {
" *******************************************************

" Keymap examples with the completion popup menu
"inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
"inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
"inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
"inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
"inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
"inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

" Map/noremap function keys (or Ctrl-X) in normal/visual & insert modes
function! s:FnMap(prefix, args)
	let args = matchlist(a:args,'\(<silent>\s\+\)\?\(.\{-}\)\s\+\(.*\)')
	execute a:prefix.'map' args[1] args[2] '<C-c>'.args[3]
	execute 'v'.a:prefix.'map' args[1] args[2] '<C-c>'.args[3]
	execute 's'.a:prefix.'map' args[1] args[2] '<C-c>'.args[3]
	"execute 'i'.a:prefix.'map' args[1] args[2] '<C-o>'.args[3]
	execute 'i'.a:prefix.'map <expr>' args[1] args[2] '(pumvisible() ? "\<C-e>" : "")."<C-O>'.args[3].'"'
endfunction

" Unmap function keys in normal/visual & insert modes
function! s:FnUnmap(map)
	execute 'unmap' a:map
	execute 'iunmap' a:map
endfunction

" Make an alternate mapping based on another
function! s:AltMap(prefix, new, old)
	if empty(maparg(a:new,a:prefix)) && !empty(maparg(a:old,a:prefix))
		execute a:prefix.'map' a:new a:old
	endif
endfunction

" Conditionnal key remapping
function! s:CondRemap(mapfct, key, mode, condition, action)
	if mapcheck(a:key,a:mode)==''
		execute a:mapfct a:key a:action
	else
		execute a:mapfct a:key
					 \ ":if" a:condition "<BAR>" a:action "<BAR> else <BAR>"
					 \ substitute(mapcheck(a:key,a:mode),'<CR>\|','','g') "<BAR> endif<CR>"
	endif
endfunction

" IMap fix for menucompletions
function! s:IMapFix(mapfct, key)
	let mapping = mapcheck(a:key,'i')
	if mapping!='' && match(mapping,"pumvisible")==-1
		execute a:mapfct '<expr>' a:key
			\ '(pumvisible() ? "\<C-e>" : "")."'.substitute(mapping,'<CR>\|','','g').'<CR>"'
	endif
endfunction

" User commands
command! -nargs=1 FnMap      call <SID>FnMap('',<f-args>)
command! -nargs=1 FnNoremap  call <SID>FnMap('nore',<f-args>)
command! -nargs=1 FnUnmap    call <SID>FnUnmap(<args>)
command! -nargs=+ AltMap     call <SID>AltMap(<f-args>)
command! -nargs=+ CondRemap  call <SID>CondRemap(<f-args>)
command! -nargs=+ IMapFix  	 call <SID>IMapFix(<f-args>)


" *******************************************************
" } Stash pop vim parameters {
" *******************************************************

" @params
function! PosStash(...)
	let s:stashCursor = [getpos(".")] + s:stashCursor
endf

" @params
function! PosPop(...)
	call setpos('.', s:stashCursor[0])
	let s:stashCursor = s:stashCursor[1:]
endf

" @params [regname]
function! RegStash(...)
	let l:regname = a:0 > 1 ? a:1 : v:register
	let s:stashReg = [getreg(l:regname), getregtype(l:regname)] + s:stashReg
endf

" @params [regname]
function! RegPop(...)
	let l:regname = a:0 > 1 ? a:1 : v:register
	call setreg(l:regname, s:stashReg[0], s:stashReg[1])
	let s:stashReg = s:stashReg[2:]
endf

" @params [markname]
function! MarkStash(...)
	let l:markname = a:0 > 1 ? a:1 : 'm'
	let s:stashMark = getpos("'" . l:markname) + s:stashMark
endf

" @params [markname]
function! MarkPop(...)
	let l:markname = a:0 > 1 ? a:1 : 'm'
	call setpos("'" . l:markname, s:stashMark)
	let s:stashMark = s:stashMark[1:]
endf


" *******************************************************
" } The end
" *******************************************************
