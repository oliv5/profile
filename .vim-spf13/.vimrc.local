" General {
	set updatetime=1000  " Swap file write / CursorHold  evt delay (in ms)
	set shell=/bin/bash\ --rcfile\ ~/.bashrc\ -i    " Set shell, load user profile
	set secure      " Security mode
	set noexrc      " don't read .vimrc in current directory

	" Force write with sudo after opening the file
	cmap w!! w !sudo tee % >/dev/null
	
	" Autoreload changed files
	"set autoread
	augroup vimrc_autoread
		au! FileChangedShell * exec 'echohl WarningMsg | echo "Warning: file' expand('%') 'changed on disk" | echohl None'
	augroup END
" }

" UI settings, theme & color scheme {
	if has('syntax')
		syntax on
		" Color scheme
		if (&term=="builtin_gui" || has("gui_running") || &t_Co>2)
			colorscheme torte
		else
			colorscheme default
		endif
		" Completion menu
		highlight Pmenu gui=bold guifg=black guibg=brown ctermfg=0 ctermbg=238
		highlight PmenuSel gui=bold guifg=black guibg=grey ctermfg=0 ctermbg=238
	endif

	" Select font
	if has('gui_running') && !exists('g:loaded_vimrc')
		"set guifont=Lucida_Console:h11
		set guifont=Monospace\ 9
	endif
	
	" Menu & toolbar
	if has('gui_running')
		set guioptions-=T
		set guioptions-=m
	endif

	" Cursor
	set nocursorline
	set scrolloff=0
	if has('gui_running')
		set nu
		map <localleader>n  :set nu!<CR>
	endif

	" Scroll bars
	if has('gui_running')
		set guioptions+=rb
		set guioptions-=l
	endif

	" Autoselect (auto-copy)
	set guioptions+=aA
" }

" Text formatting {
	" Word/line wrap options
	set nowrap              " No wrap by default
	nnoremap <localleader>w  :set invwrap<CR>

	" Show all characters
	set nolist              " Do not show all characters by default
	nnoremap <localleader>c  :set invlist<CR>

	" Word spelling
	set nospell
	autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl setlocal spell spelllang=en_us
" }

" Misc configuration {
	" Autochange dir
	let g:vimrc_autochdir = 2

	" Autocompletion using completefunc (omnifunc=<c-x><c-o>)
	imap <C-space>  <C-x><C-u>

	" Paste in terminal mode
	" Allow movement key in vi mode
	if !has("gui_running")
	  function! XTermPasteBegin()
		set pastetoggle=<Esc>[201~
		set paste
		return ""
	  endfunction
	  let &t_SI .= "\<Esc>[?2004h"
	  let &t_EI .= "\<Esc>[?2004l"
	  inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
	endif
" }

" MRU using tlib {
	let s:mru_backward=0
	let s:mru_forward=0
	if !exists('s:mru_init')
		silent! call tlib#buffer#EnableMRU()
		let s:mru_init=1
	endif

	function! s:MRUinc()
		" No need to check for len(tlib#buffer#GetList(0,0,'mru')[0])
		" because it can be wrong when called by event BufAdd
		let s:mru_backward+=1
		let s:mru_forward+=1
	endfunction
	
	function! s:MRUcycle(counter1, counter2)
		let l:buflist=tlib#buffer#GetList(0,0,'mru')[0]
		let {a:counter2} = 0
		if {a:counter1}<(len(l:buflist)-1)
			let {a:counter1} = ({a:counter1}+1)
		endif
		exe "silent! b" l:buflist[{a:counter1}]
	endfunction
	
	function! s:MRUcycle(counter1, counter2)
		" Skip non-normal buffer
		if getbufvar(winbufnr(0), "&buftype") != ''
			return
		endif
		let {a:counter2} = 0
		let l:buflist=tlib#buffer#GetList(0,0,'mru')[0]
		" Protection when event BufAdd increases the counters (hidden buffers...)
		let {a:counter1} = ({a:counter1} % len(l:buflist))
		" Find the next normal buffer starting from the next one
		for {a:counter1} in range({a:counter1}+1, (len(l:buflist)-1))
			if getbufvar(l:buflist[{a:counter1}], "&buftype") == ''
				exe "silent! b" l:buflist[{a:counter1}]
				return
			endif
		endfor
		" Not found yet: maybe the last of the list or a non-normal one
		" Try to find a normal buffer in reverse order starting from the current one
		for {a:counter1} in range({a:counter1}, 0, -1)
			if getbufvar(l:buflist[{a:counter1}], "&buftype") == ''
				exe "silent! b" l:buflist[{a:counter1}]
				return
			endif
		endfor
	endfunction

	function! s:MRUbackward()
		return s:MRUcycle('s:mru_backward', 's:mru_forward')
	endfunction

	function! s:MRUforward()
		return s:MRUcycle('s:mru_forward', 's:mru_backward')
	endfunction

	command! -nargs=0 -bar MRUbackward	call s:MRUbackward()
	command! -nargs=0 -bar MRUforward	call s:MRUforward()
	command! -nargs=0 -bar MRUlist		echo tlib#buffer#GetList(0,0,'mru')[1]

	augroup MRU
		au!
		au BufAdd * 	call <SID>MRUinc()
	augroup END

	FnNoremap <C-Tab>		:MRUbackward<CR>
	FnNoremap <C-S-Tab>		:MRUforward<CR>
" }

" Bundles configuration overwritten by SPF13 {
	" Wildfire (text object selection)
	let g:wildfire_objects = {
		\ "*" : ["iw", "iW", "i'", 'i"', "i)", "i]", "i}", "at", "it"],
		\ "html,xml" : ["at", "it"],
	\ }
	map <BS> <Plug>(wildfire-fuel)
	vmap <BS> <Plug>(wildfire-fuel)
	vmap <S-BS> <Plug>(wildfire-water)

	" Ctrlp - apply wildignore & g:ctrlp_custom_ignore
	let g:ctrlp_user_command['ignore'] = 1
	let g:ctrlp_custom_ignore = {
		\ 'dir':  '\.git$\|\.hg$\|\.svn$\|tmp$',
		\ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$\|\.tmp$\|\.svn' }
" }

" Use legacy after config if available {
	if filereadable(expand("~/.vim-legacy/.vimrc.after"))
		source ~/.vim-legacy/.vimrc.after
	endif
" }

" Use custom local config if available {
	if filereadable(expand("~/.vimrc.local.custom"))
		source ~/.vimrc.local.custom
	endif
" }

" User profile end {
	let g:loaded_vimrc = 1
" }
