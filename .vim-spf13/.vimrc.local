" General {
	set updatetime=1000  " Swap file write / CursorHold  evt delay (in ms)
	set shell=/bin/bash\ --rcfile\ ~/.bashrc\ -i    " Set shell, load user profile
	set secure      " Security mode
	set noexrc      " don't read .vimrc in current directory

	" Force write with sudo after opening the file
	cmap w!! w !sudo tee % >/dev/null
" }

" UI settings, theme & color scheme {
	if has('syntax')
		colorscheme torte
		syntax on
	endif

	" Select font
	if has('gui_running') && !exists('g:loaded_vimrc')
		"set guifont=Lucida_Console:h11
		set guifont=Monospace\ 9
	endif

	" Cursor
	set nocursorline
	set scrolloff=0
	if has('gui_running')
		set nu
		map <localleader>n  :set nu!<CR>
	endif
	
	" Scroll bars
	if has('gui_running')
		set guioptions+=rb
		set guioptions-=rl
	endif
" }

" Text formatting {
	" Word/line wrap options
	set nowrap              " No wrap by default
	nnoremap <localleader>w  :set invwrap<CR>

	" Show all characters
	set nolist              " Do not show all characters by default
	nnoremap <localleader>c  :set invlist<CR>

	" Word spelling
	set nospell
	autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl setlocal spell spelllang=en_us
" }

" Misc configuration {
	" Autochange dir
	"let g:vimrc_noautochdir = 1
	
	" Autocompletion
	imap <C-space>  <C-x><C-u>

	" Paste in terminal mode
	" Allow movement key in vi mode
	if !has("gui_running")
	  function! XTermPasteBegin()
		set pastetoggle=<Esc>[201~
		set paste
		return ""
	  endfunction
	  let &t_SI .= "\<Esc>[?2004h"
	  let &t_EI .= "\<Esc>[?2004l"
	  inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
	endif
" }

" MRU using tlib {
	let s:mru_backward=0
	let s:mru_forward=0
	"let s:mru_reset=1
	if !exists('s:mru_init')
		silent! call tlib#buffer#EnableMRU()
		let s:mru_init=1
	endif

	"function! s:MRUreset()
	"	if s:mru_reset!=0
	"		let s:mru_backward=0
	"		let s:mru_forward=0
	"	endif
	"	let s:mru_reset = 1
	"endfunction

	function! s:MRUbackward()
		let l:buflist=tlib#buffer#GetList(0,0,'mru')[0]
		"let s:mru_reset = 0
		let s:mru_forward = 0
		if s:mru_backward<(len(l:buflist)-1)
			let s:mru_backward = (s:mru_backward+1)
		endif
		"let tmp = s:mru_backward
		exe "b" l:buflist[s:mru_backward]
		"let s:mru_backward = tmp
	endfunction

	function! s:MRUforward()
		let l:buflist=tlib#buffer#GetList(0,0,'mru')[0]
		"let s:mru_reset = 0
		let s:mru_backward = 0
		if s:mru_forward<(len(l:buflist)-1)
			let s:mru_forward = (s:mru_forward+1)
		endif
		"let tmp = s:mru_forward
		exe "b" l:buflist[s:mru_forward]
		"let s:mru_forward = tmp
	endfunction
	
	command! -nargs=0 -bar MRUbackward	call s:MRUbackward()
	command! -nargs=0 -bar MRUforward	call s:MRUforward()
	command! -nargs=0 -bar MRUlist		echo tlib#buffer#GetList(0,0,'mru')[1]

	"augroup MRU
	"	au!
	"	au BufEnter * 		call <SID>MRUreset()
	"augroup END
	
	FnNoremap <C-Tab>		:MRUbackward<CR>
	FnNoremap <C-S-Tab>		:MRUforward<CR>
" }

" Use legacy after config if available {
	if filereadable(expand("~/.vim-legacy/.vimrc.after"))
		source ~/.vim-legacy/.vimrc.after
	endif
" }

" User profile end {
	let g:loaded_vimrc = 1
" }
