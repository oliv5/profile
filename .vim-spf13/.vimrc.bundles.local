" Legacy bundles config {
	" Leader key mappings
	let mapleader = g:spf13_leader
	let maplocalleader = g:spf13_localleader

	" Disable unused plugins
	let g:loaded_bbye = 1
	let g:loaded_project = 1
	let g:loaded_taglist = 1
	"let g:loaded_tagbar = 1
	let g:loaded_srcexpl = 1
	"let g:loaded_nerd_tree = 1
	let g:loaded_trinity = 1
	let g:ccvext_version = 1
	let g:loaded_yankring = 1
	"let g:loaded_cctree = 1
	let g:command_t_loaded = 1
	let g:loaded_minibufexplorer = 1
	"let g:loaded_yaifa = 1
	"let g:loaded_ctrlp = 1
	let g:loaded_buftabs = 1
	let g:loaded_easytags = 1
	let g:c_complete_loaded = 1
	let g:syntax_complete_loaded = 1
	let g:omnicpp_complete_loaded = 1
	let g:clang_complete_loaded = 1
	let g:loaded_commentary = 1
	let g:loaded_bufline = 1
	let g:autotag_vim_version_sourced = 1
	
	" Disable my statusline
	let g:vimrc_nostatusline = 1

	" Load additional bundle config
	if filereadable(expand("~/.vim-legacy/.vimrc.bundles"))
		source ~/.vim-legacy/.vimrc.bundles
	endif
" }

" Additional bundles {
	"Bundle 'powerman/vim-plugin-AnsiEsc'
	"Bundle 'fholgado/minibufexpl.vim'
	Bundle 'vim-scripts/AutoTag'
	Bundle 'hari-rangarajan/CCTree'
	Bundle 'Raimondi/YAIFA'
	Bundle 'vim-scripts/MultipleSearch'
	"Bundle 'vim-scripts/highlight.vim'
	Bundle 'mtth/scratch.vim'
" }

" Configure SPF13 plugins {
	" Disable unwanted SPF13 plugins
	UnBundle 'bling/vim-bufferline'
	UnBundle 'spf13/vim-autoclose'

	" CtrlpFunky
	let g:ctrlp_funky_syntax_highlight = 1
	FnNoremap <C-o><C-o>	:CtrlPFunky<CR>
	FnNoremap <C-p><C-p>	:CtrlPFunky<CR>

	" Neosnippet
	if exists('*neosnippet#init#_initialize()')
		let g:neosnippet#disable_select_mode_mappings = 1
	"	imap <C-k>     <Plug>(neosnippet_expand_or_jump)
	"	smap <C-k>     <Plug>(neosnippet_expand_or_jump)
	"	xmap <C-k>     <Plug>(neosnippet_expand_target)
	"	imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
	"		\ "\<Plug>(neosnippet_expand_or_jump)"
	"		\: pumvisible() ? "\<C-n>" : "\<TAB>"
	"	smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
	"		\ "\<Plug>(neosnippet_expand_or_jump)"
	"		\: "\<TAB>"
	"	if has('conceal')
	"		" For snippet_complete marker.
	"		set conceallevel=2 concealcursor=i
	"	endif
	endif

	" Syntastic
	let g:syntastic_python_checkers = ['pylint']
	let g:syntastic_python_pylint_args='--max-line-length=120 --max-module-lines=5000 --indent-string=""'

	" Nerdcommenter
	FnMap <C-l>     <plug>NERDCommenterToggle
	vmap <C-l>      <plug>NERDCommenterToggle
	imap <C-l>      <plug>NERDCommenterInsert
	snoremap <C-l>  <C-g> " From select to visual mode and stay there
" }
