#!/bin/sh
# Main user profile script
# It should be compatible with all shells (dash, bash,...)

################################
# Set load flag
export ENV_RC=$((ENV_CNT=ENV_CNT+1))
# Local RC variables
RC_VERBOSE="false"
RC_SOURCED=""
RC_LOAD="true"

################################
# Arguments
while getopts 'vd' RC_ARG; do
  case "$RC_ARG" in
    v) RC_VERBOSE="true";;
    *) echo >&2 "Usage: $(basename "$0") [-v]"
       echo >&2 "-v   verbose mode"
       kill -INT $$
       ;;
  esac
done
shift $(expr $OPTIND - 1)

################################
# Log function
rc_log() {
  ${RC_VERBOSE:-false} && echo "$@"
}

################################
# List, load and reload profile scripts
alias rc='. "$HOME/.rc"'
alias load='RC_VERBOSE=true RC_LOAD=true RC_SOURCED="" rc_sourcemod'
alias profile='rc'

# Load scripts by pattern and perms
rc_sourcefile() {
  # Args
  local DIR="${1:-$HOME/.rc.d}"
  [ -d "$DIR" ] || return 2
  local AUTOLOAD="-perm -ugo=x"
  local AVAILABLE="-perm /go=x"
  local DISABLED="! -perm /ugo=x"
  local DEPTH_MIN="${2:-1}"
  local DEPTH_MAX="${3:-1}"
  local PERMS="$(eval echo \$${4:-AUTOLOAD})"
  command shift 4 2>/dev/null || set --
  # Set ctrl-c/term traps + disable file globering
  trap 'set +f; trap INT; return 1' INT
  trap 'set +f; trap TERM; return 1' TERM
  set -f
  # Main processing
  local RESULT=1
  local PATTERN="$(printf '%s\n' "$@" | sort -u)"
  for PATTERN in ${PATTERN:-""}; do
    # Use pattern only when not already done
    if [ "$RC_SOURCED" == "${RC_SOURCED%*$PATTERN*}" ]; then
      RC_SOURCED="$RC_SOURCED $PATTERN"
      for SCRIPT in $(find "$DIR" ${DEPTH_MIN:+-mindepth $DEPTH_MIN} ${DEPTH_MAX:+-maxdepth $DEPTH_MAX} \
                                  -path "*$PATTERN.sh" -not -path '*/test/*' \
                                  ${PERMS} -prune -print | sort); do
        # Source file only if not already done
        if [ "$RC_SOURCED" == "${RC_SOURCED%*$(basename "$SCRIPT")*}" ]; then
          rc_log "Source $SCRIPT"
          if ${RC_LOAD:-true}; then
            RC_SOURCED="$RC_SOURCED $(basename "$SCRIPT")"
            set +f
            . "$SCRIPT" && RESULT=0 || RESULT=1
            set -f
          fi
        fi
      done
    fi
  done
  # Remove ctrl-c/term traps + enable file globering
  set +f; trap INT; trap TERM
  return $RESULT
}

# Load executable scripts from given directory
# Declare the associated ENV_ variable
rc_sourcedir() {
  for DIR; do
    rc_log "[RC] Load directory $(basename "$DIR")"
    local DIRNAME="$(basename "$DIR" | sed -r 's/\./_/g; s/^_//g; s/(.*)/\U\1/')"
    eval "export ENV_$DIRNAME=$((ENV_CNT=ENV_CNT+1))"
    rc_sourcefile "$DIR"
  done
}

# Load modules or dependencies
rc_sourcemod() {
  if [ $# -gt 0 ]; then
    rc_log "[RC] Load modules '$@'"
    rc_sourcefile "$HOME/.rc.d" 1 9999 "AVAILABLE" "$@"
  fi
}

rc_list() {
  echo "List of autoloaded scripts"
  RC_VERBOSE=true RC_LOAD=false rc_sourcefile "$HOME/.rc.d" 1 9999 "AUTOLOAD"
  echo 
  echo "List of available scripts"
  RC_VERBOSE=true RC_LOAD=false rc_sourcefile "$HOME/.rc.d" 1 9999 "AVAILABLE"
  echo 
  echo "List of disabled scripts"
  RC_VERBOSE=true RC_LOAD=false rc_sourcefile "$HOME/.rc.d" 1 9999 "DISABLED"
}

################################
# Load .profile when not already done
if [ -z "$ENV_PROFILE" ] && [ -r "$HOME/.profile" ]; then
  rc_log "[RC] Load .profile"
  . "$HOME/.profile"
fi

# Load local configuration script
if [ -r "$HOME/.rc.local" ]; then
  rc_log "[RC] Load .rc.local"
  export ENV_RC_LOCAL=$((ENV_CNT=ENV_CNT+1))
  . "$HOME/.rc.local"
fi

# Load profile scripts
rc_sourcedir "$HOME/.rc.d"
if [ ! -z "$BASH_VERSION" ]; then
  rc_sourcedir "$HOME/.rc.d/bash"
fi
rc_sourcedir "$HOME/.rc.d/local"

# Load main configuration end script
if [ -r "$HOME/.rc.end" ]; then
  rc_log "[RC] Load .rc.end"
  export ENV_RC_END=$((ENV_CNT=ENV_CNT+1))
  . "$HOME/.rc.end"
fi

# Load local configuration end script
if [ -r "$HOME/.rc.local.end" ]; then
  rc_log "[RC] Load .rc.local.end"
  export ENV_RC_LOCAL_END=$((ENV_CNT=ENV_CNT+1))
  . "$HOME/.rc.local.end"
fi

################################
# Epilogue
#Cleanup
unset RC_VERBOSE
unset RC_SOURCED
unset RC_LOAD
unset RC_ARG
# Set load flag
export ENV_LOADED=$ENV_CNT
export ENV_CNT
